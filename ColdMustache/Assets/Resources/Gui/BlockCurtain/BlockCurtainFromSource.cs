using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BlockCurtainFromSource : MonoBehaviour
{

    public Transform ObjectsParent;

    string SourceString = "0,0,29;1,13,0;2,16,5;3,37,7;4,47,7;5,54,7;6,53,21;7,97,28;8,113,28;9,126,29;10,173,26;11,186,3;12,212,7;13,247,6;14,246,23;15,288,15;16,289,24;17,293,25;18,320,9;19,326,43;20,353,51;21,364,50;22,403,51;23,433,39;24,484,6;25,487,2;26,17,28;27,489,3;28,490,17;29,202,25;30,21,35;31,35,54;32,243,9;33,246,50;34,55,53;35,201,38;36,231,50;37,292,43;38,185,14;39,0,32;40,186,15;41,187,16;42,188,17;43,189,18;44,471,42;45,190,19;46,284,25;47,191,20;48,192,21;49,87,74;50,193,26;51,261,75;52,291,25;53,125,75;54,197,28;55,199,56;56,293,75;57,198,30;58,19,30;59,16,32;60,18,33;61,152,74;62,0,43;63,11,68;64,0,70;65,192,64;66,10,119;67,469,99;68,223,57;69,466,41;70,403,93;71,450,100;72,312,78;73,354,83;74,349,80;75,226,105;76,254,106;77,223,63;78,395,93;79,87,57;80,88,100;81,196,73;82,46,119;83,88,118;84,213,60;85,188,75;86,212,61;87,223,64;88,0,71;89,222,105;90,156,76;91,189,92;92,0,86;93,0,119;94,132,125;95,310,122;96,131,171;97,147,78;98,292,129;99,146,79;100,192,131;101,254,128;102,342,122;103,116,126;104,378,119;105,382,91;106,342,124;107,392,110;108,499,100;109,411,125;110,225,134;111,385,121;112,427,170;113,498,125;114,91,127;115,482,170;116,255,132;117,259,131;118,388,125;119,0,143;120,42,122;121,45,170;122,62,122;123,0,191;124,27,191;125,92,124;126,384,186;127,341,123;128,341,172;129,93,170;130,101,140;131,294,147;132,358,187;133,320,172;134,396,191;135,120,167;136,272,141;137,428,191;138,280,170;139,254,153;140,229,147;141,195,195;142,223,137;143,153,219;144,222,138;145,232,138;146,233,139;147,234,162;148,267,168;149,97,171;150,255,163;151,302,173;152,256,169;153,481,189;154,0,208;155,248,243;156,194,242;157,298,169;158,95,171;159,96,200;160,302,211;161,54,224;162,27,223;163,325,209;164,442,193;165,475,195;166,130,219;167,97,223;168,362,176;169,363,177;170,364,194;171,378,226;172,400,206;173,440,221;174,425,228;175,17,222;176,463,226;177,0,221;178,321,261;179,30,199;180,173,263;181,31,200;182,190,200;183,31,223;184,108,224;185,153,233;186,189,201;187,196,273;188,467,255;189,446,203;190,447,204;191,447,206;192,449,207;193,449,229;194,410,230;195,250,278;196,305,278;197,492,254;198,108,240;199,0,250;200,129,261;201,10,250;202,40,229;203,42,260;204,55,245;205,77,265;206,462,229;207,408,276;208,386,277;209,460,248;210,347,269;211,10,261;212,432,276;213,462,263;214,160,264;215,99,265;216,0,255;217,236,303;218,57,265;219,221,301;220,492,260;221,9,251;222,3,300;223,0,301;224,11,279;225,475,291;226,469,286;227,50,304;228,98,315;229,159,303;230,345,264;231,31,304;232,144,315;233,342,265;234,346,283;235,431,290;236,308,280;237,336,281;238,97,266;239,216,266;240,50,330;241,200,295;242,98,331;243,217,276;244,379,283;245,459,337;246,217,303;247,378,316;248,303,279;249,305,295;250,431,303;251,238,334;252,304,332;253,4,305;254,196,303;255,327,318;256,431,309;257,352,318;258,362,319;259,475,291;260,474,293;261,446,325;262,307,333;263,0,339;264,0,303;265,172,336;266,197,336;267,219,340;268,237,305;269,430,326;270,144,324;271,227,355;272,239,356;273,50,369;274,6,369;275,414,320;276,142,348;277,363,340;278,413,318;279,103,354;280,413,353;281,361,319;282,401,354;283,306,381;284,362,320;285,362,371;286,431,355;287,348,381;288,138,353;289,144,391;290,458,326;291,433,363;292,462,363;293,91,394;294,54,394;295,259,403;296,107,364;297,305,403;298,0,345;299,221,348;300,0,388;301,7,342;302,224,371;303,387,369;304,8,343;305,8,391;306,218,372;307,137,369;308,480,370;309,217,380;310,430,354;311,431,405;312,127,391;313,243,409;314,385,405;315,232,407;316,448,413;317,481,405;318,93,395;319,395,368;320,0,390;321,392,369;322,387,371;323,386,371;324,40,393;325,347,438;326,57,395;327,216,411;328,385,446;329,369,447;330,147,392;331,213,383;332,155,425;333,175,425;334,304,418;335,330,438;336,0,407;337,12,426;338,24,398;339,34,431;340,146,392;341,148,416;342,0,429;343,92,418;344,125,448;345,67,431;346,106,448;347,92,425;348,11,432;349,243,447;350,261,447;351,448,408;352,416,458;353,451,438;354,449,458;355,235,419;356,173,474;357,241,438;358,93,448;359,321,440;360,488,453;361,0,431;362,229,473;363,172,426;364,125,475;365,84,436;366,173,476;367,7,432;368,10,431;369,11,497;370,0,438;371,0,473;372,83,432;373,47,496;374,11,434;375,85,464;376,12,506;377,94,474;378,368,439;379,466,458;380,260,473;381,321,465;382,362,500;383,318,480;384,374,462;385,338,499;386,306,480;387,400,483;388,259,450;389,419,449;390,227,490;391,421,471;392,254,498;393,260,493;394,127,476;395,507,457;396,502,455;397,505,456;398,463,479;399,485,504;400,507,485;401,462,459;402,453,496;403,444,479;404,94,466;405,365,500;406,0,474;407,319,499;408,0,505;409,84,511;410,97,511;411,428,489;412,46,511;413,177,511;414,137,511;415,300,487;416,0,511;417,205,511;418,229,509;419,318,481;420,290,510;421,449,495;422,472,506;423,314,484;424,320,505;425,292,505;426,363,511;427,428,511;428,297,489;429,281,509;430,296,490;431,441,511;432,253,503;433,269,508;434,456,511;435,28,511;436,474,511;437,254,508;438,45,511;439,360,500;440,325,511;441,362,501;442,358,511;443,364,503;444,238,511;445,251,511;446,365,504;447,365,511;448,255,511;449,290,511;450,20,511;451,283,508;452,289,511;453,236,511;";
    SpriteRenderer[] Blocks;



    int ImageHeight = 512;
    int ImageWidth = 512;


    float[] Ages;
    float[] Speeds;

    float BaseSpeed = 5;

    float BaseDelayBetweenObjects = 0.005f; //0.05

    bool IsUpdateNeeded = true;

    void Start()
    {
        string[] FirstSplit = SourceString.Split(';');

        List<string[]>Data = new List<string[]>();

        foreach(string s in FirstSplit){

            string[] d = s.Split(',');

            if(d.Length == 3){
                Data.Add(d);
            }

        }

        ObjectsParent.localScale = new Vector3(1f/(float)ImageWidth, 1f/(float)ImageHeight,1);

        Blocks = new SpriteRenderer[Data.Count];
        Ages = new float[Data.Count];
        Speeds = new float[Data.Count];

        for(int i = 0; i < Data.Count; i++){
            
            GameObject go = new GameObject();
            go.transform.parent = ObjectsParent;
            go.transform.localPosition = new Vector3(int.Parse(Data[i][1]), ImageHeight-1-int.Parse(Data[i][2]), 0);
            go.transform.localScale = new Vector3(1, 1, 1);
            go.name = Data[i][0];

            SpriteRenderer sr = go.AddComponent<SpriteRenderer>();
            sr.sprite = Resources.Load<Sprite>("Gui/BlockCurtain/Source/"+Data[i][0]);

            Blocks[i] = sr;
            Ages[i] = 2;
            Speeds[i] = 0;

        }



    }

    void Update()
    {
        
        if (Input.GetKeyUp(KeyCode.B))
        {
            TurnBlack();
        }
        if (Input.GetKeyUp(KeyCode.N))
        {
            TurnTransparent();
        }


        if (!IsUpdateNeeded) return;

        Render();

        for (int i = 0; i < Blocks.Length; i++)
        {
            Ages[i] += Time.deltaTime * Speeds[i];
        }
    }

    public void Render()
    {

        IsUpdateNeeded = false;


        for (int i = 0; i < Blocks.Length; i++)
        {
            float f = Ages[i];

            /*
            if (f < 0) { Blocks[x, y].color = Color.black; continue; }
            if (f > 1) { Blocks[x, y].color = new Color(0,0,0,0); continue; }
            Blocks[x, y].color = new Color(0, 0, 0, 1-f);
            continue;
            */

            //0.1764706,0.2666667,0.4431373   <- my dark blue im using as main color in menus

            if (Speeds[i] > 0 && f < 1) IsUpdateNeeded = true;
            if (Speeds[i] < 0 && f > 0) IsUpdateNeeded = true;

            if (f < 0) { Blocks[i].color = Color.black; continue; }
            if (f > 1) { Blocks[i].color = new Color(0.1764706f, 0.2666667f, 0.4431373f, 0); continue; }
            Blocks[i].color = new Color(0.1764706f * f, 0.2666667f * f, 0.4431373f * f, 1 - f);
            continue;
        }

    }

    public void TurnBlack()
    {

        IsUpdateNeeded = true;

        for (int i = 0; i < Blocks.Length; i++)
        {
            Ages[i] = (i) * BaseDelayBetweenObjects + Random.Range(1f, 1.3f);
            Speeds[i] = -BaseSpeed * Random.Range(0.75f, 1.5f);
        }
    }

    public void TurnTransparent()
    {

        IsUpdateNeeded = true;

        for (int i = 0; i < Blocks.Length; i++)
        {
            Ages[i] = (i) * -BaseDelayBetweenObjects + Random.Range(-0.3f, 0f);
            Speeds[i] = BaseSpeed * Random.Range(0.75f, 1.5f);
        }
    }

}
